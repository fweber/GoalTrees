# Generated by Django 3.1.2 on 2021-03-26 16:23
import csv
from goaltrees import settings
from django.db import migrations
from django.core.management.color import no_style
from django.db import connection

def read_data(apps, schema_editor):
    Study = apps.get_model("construction", "Study")
    Goal = apps.get_model("construction", "Goal")
    Item = apps.get_model("construction", "Item")
    Participant = apps.get_model("construction", "Participant")
    Question = apps.get_model("construction", "Question")

    study = Study.objects.get_or_create(
        name="prestudy",
        sequence=["welcome", "consent", "userdata", "big_five", "instructions", "example_tree", "tree_construction", "nasa_tlx", "utility_measure", "thankyou"],
        classname="STUDY_prestudy",
    )[0]
    study.save()

    # read participants
    with open(
            '{}/apps/construction/static/construction/data/study_data/prestudy_draksler/participants.csv'.format(settings.BASE_DIR),
            'r',
            encoding="utf-8") as file:
        reader = csv.reader(file, delimiter=";")

        for row in reader:
            print(row)
            # skip header row
            if row[0] == "Participant":
                continue
            participant = Participant.objects.get_or_create(
                id=row[0],
                age=(None if row[1]=="" else row[1]),
                semester=(None if row[2]=="" else row[2]),
                subject=(None if row[3]=="" else row[3]),
                degree=(None if row[4]=="" else row[4]),
                created=row[5],
                condition="dendrogram",
                study=study,
            )[0]
            participant.save()

    with open(
            '{}/apps/construction/static/construction/data/study_data/prestudy_draksler/goals.csv'.format(settings.BASE_DIR),
            'r',
            encoding="utf-8") as file:
        reader = csv.reader(file, delimiter=";")

        for row in reader:
            print(row)
            # skip header row
            if row[0] == "id":
                continue
            goal = Goal.objects.get_or_create(
                id=row[0],
                tree_id=row[1],
                parent_id=row[2],
                title=row[3][0:20], # todo set a proper title and description
                description=row[3],
                participant=Participant.objects.get(id=row[4]),
                created=row[5],
            )[0]
            goal.save()

    with open(
            '{}/apps/construction/static/construction/data/study_data/prestudy_draksler/Items.csv'.format(settings.BASE_DIR),
            'r',
            encoding="utf-8") as file:
        reader = csv.reader(file, delimiter=";")

        for row in reader:
            print(row)
            # skip header row
            if row[0] == "id":
                continue
            item = Item.objects.get_or_create(
                id=row[0],
                questionnaire =row[1],
                code =row[2],
                text =row[3],
                latent_variable=row[4],
                answers =list(row[5]),
                participant =Participant.objects.get(id=row[6]),
                created =row[7],
                given_answer =row[8],
            )[0]
            item.save()

    with open(
            '{}/apps/construction/static/construction/data/study_data/prestudy_draksler/questions.csv'.format(settings.BASE_DIR),
            'r',
            encoding="utf-8") as file:
        reader = csv.reader(file, delimiter=";")

        for row in reader:
            print(row)
            # skip header row
            if row[0] == "id":
                continue
            question = Question.objects.get_or_create(
                id=row[0],
                participant=Participant.objects.get(id=row[1]),
                question=row[2],
                answer=row[4],
                type=row[5],
            )[0]
            question.save()

        sequence_sql = connection.ops.sequence_reset_sql(no_style(), [Goal, Item, Participant, Question])
        with connection.cursor() as cursor:
            for sql in sequence_sql:
                cursor.execute(sql)



class Migration(migrations.Migration):

    dependencies = [
        ('construction', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(read_data, reverse_code=migrations.RunPython.noop)
    ]
